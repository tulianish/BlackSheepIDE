/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package blacksheep.ide;
import java.awt.Color;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
/**
 *
 * @author Anish
 */
public class BlacksheepGUI extends javax.swing.JFrame {
    CurrentWorkspace cw;
    java.util.Properties prop;
    /**
     * Creates new form BlacksheepGUI
     */
   private void setProperties()
   {
       jTextPane1.setFont(new java.awt.Font(prop.getProperty("fontfam"),java.awt.Font.PLAIN,Integer.parseInt(prop.getProperty("fontsiz"))));
   }
   public BlacksheepGUI ()
   {
       try {
           initComponents();
           File xz = new File(System.getProperty("user.dir")+"\\BLACKSHEEP_PREF.xml");
           if(xz.exists())
           {
               prop = new java.util.Properties();
               prop.loadFromXML(new FileInputStream(xz));
               setProperties();
           }
           else
           {
               prop = new java.util.Properties();
               //TODO: Initialize default properties
               xz.createNewFile();
               prop.setProperty("fontfam", "Courier New");
               prop.setProperty("fontsiz", "14");
               prop.storeToXML(new FileOutputStream(xz), null);
               setProperties();
           }
       } catch(Exception ioe) {
           System.err.println(ioe.getMessage());
       }
       this.keywords = new String[]{"abstract","continue","for","new","switch","assert","default","goto","package","synchronized","boolean","do","if","private","this","break","double","implements","protected","throw","byte","else","import","public","throw","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while"};
       cw = new CurrentWorkspace();
       setIcon();
       jTextPane1.setText("abc\nvoid main");
       this.highlightText();
       jTextPane1.setText("");
       this.highlightText();
       
   }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jMenuItem2 = new javax.swing.JMenuItem();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenufNew = new javax.swing.JMenuItem();
        jMenufOpen = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenufSave = new javax.swing.JMenuItem();
        jMenufSaveAs = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenufExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenueUndo = new javax.swing.JMenuItem();
        jMenueRedo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenueClear = new javax.swing.JMenuItem();
        jMenueClearAll = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jMenuRun = new javax.swing.JMenu();
        jMenurBuild = new javax.swing.JMenuItem();
        jMenurBuildandRun = new javax.swing.JMenuItem();
        jMenuTools = new javax.swing.JMenu();
        jMenutPreferences = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("BlackSheep IDE");
        setBackground(new java.awt.Color(0, 0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTabbedPane2.setToolTipText("Untitled - BlackSheep IDE");

        jTextPane1.setFont(new java.awt.Font("Courier New", 0, 15)); // NOI18N
        jTextPane1.setForeground(new java.awt.Color(51, 51, 51));
        jTextPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextPane1PropertyChange(evt);
            }
        });
        jTextPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextPane1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPane1);

        jTabbedPane2.addTab("Untitled", jScrollPane1);

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar1.setOpaque(false);

        jMenuFile.setText("File");

        jMenufNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenufNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blacksheep/ide/icons/New-file-icon.png"))); // NOI18N
        jMenufNew.setText("New");
        jMenufNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenufNewActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenufNew);

        jMenufOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenufOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blacksheep/ide/icons/Open-file-icon.png"))); // NOI18N
        jMenufOpen.setText("Open");
        jMenufOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenufOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenufOpen);
        jMenuFile.add(jSeparator2);

        jMenufSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenufSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blacksheep/ide/icons/Actions-document-save-icon.png"))); // NOI18N
        jMenufSave.setText("Save");
        jMenufSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenufSaveActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenufSave);

        jMenufSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenufSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blacksheep/ide/icons/Actions-document-save-as-icon.png"))); // NOI18N
        jMenufSaveAs.setText("Save As");
        jMenufSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenufSaveAsActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenufSaveAs);
        jMenuFile.add(jSeparator3);

        jMenufExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenufExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blacksheep/ide/icons/Close-2-icon.png"))); // NOI18N
        jMenufExit.setText("Exit");
        jMenufExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenufExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenufExit);

        jMenuBar1.add(jMenuFile);

        jMenuEdit.setText("Edit");

        jMenueUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenueUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blacksheep/ide/icons/undo-icon.png"))); // NOI18N
        jMenueUndo.setText("Undo");
        jMenueUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenueUndoActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenueUndo);

        jMenueRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenueRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blacksheep/ide/icons/Actions-edit-redo-icon.png"))); // NOI18N
        jMenueRedo.setText("Redo");
        jMenuEdit.add(jMenueRedo);
        jMenuEdit.add(jSeparator1);

        jMenueClear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jMenueClear.setText("Clear");
        jMenueClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenueClearActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenueClear);

        jMenueClearAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenueClearAll.setText("Clear All");
        jMenueClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenueClearAllActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenueClearAll);
        jMenuEdit.add(jSeparator7);

        jMenuBar1.add(jMenuEdit);

        jMenuRun.setText("Run");

        jMenurBuild.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, java.awt.event.InputEvent.ALT_MASK));
        jMenurBuild.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blacksheep/ide/icons/Action-build-icon.png"))); // NOI18N
        jMenurBuild.setText("Build");
        jMenurBuild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenurBuildActionPerformed(evt);
            }
        });
        jMenuRun.add(jMenurBuild);

        jMenurBuildandRun.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, java.awt.event.InputEvent.CTRL_MASK));
        jMenurBuildandRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blacksheep/ide/icons/run-copy-icon.png"))); // NOI18N
        jMenurBuildandRun.setText("Build and Run");
        jMenurBuildandRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenurBuildandRunActionPerformed(evt);
            }
        });
        jMenuRun.add(jMenurBuildandRun);

        jMenuBar1.add(jMenuRun);

        jMenuTools.setText("Tools");
        jMenuTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuToolsActionPerformed(evt);
            }
        });

        jMenutPreferences.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenutPreferences.setText("Preferences");
        jMenutPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenutPreferencesActionPerformed(evt);
            }
        });
        jMenuTools.add(jMenutPreferences);

        jMenuBar1.add(jMenuTools);

        jMenu5.setBackground(new java.awt.Color(255, 255, 255));
        jMenu5.setText("Help");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int exitbois()
    {
        try 
        {
            if((cw.isSaved(jTextPane1.getText()) && cw.currentFile.exists()) || (cw.currentFile == null && jTextPane1.getText().length()==0))
            {
                System.exit(0);
            }
            else if(cw.currentFile!=null && !cw.isSaved(jTextPane1.getText()))
            {
                int n = CurrentWorkspace.saveConfirmation();
                switch (n) {
                    case 1:
                        System.exit(0);
                    case 0:
                        cw.save(CurrentWorkspace.getNameWithoutExtension(cw.currentFile.getAbsolutePath()), jTextPane1.getText());
                        System.exit(0);
                    case 2:
                        return -2;
                    default:
                        break;
                }
            }
            else
            {
                int n = CurrentWorkspace.saveConfirmation();
                switch (n) {
                    case 1:
                        System.exit(0);
                    case 0:
                        cw.saveAs(CurrentWorkspace.chooseFile(),jTextPane1.getText());
                        System.exit(0);
                    case 2:
                        return -2;
                    default:
                        break;
                }
            }
            jTabbedPane2.setTabComponentAt(0,new JLabel(cw.currentFile.getName()));
            jTabbedPane2.setToolTipText(cw.currentFile.getName());
            return 0;
        }
        catch(IOException ioe)
        {
            System.err.println("File not found");
            return 1;
        }
    }
    private void jMenufExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenufExitActionPerformed
        this.exitbois();
    }//GEN-LAST:event_jMenufExitActionPerformed

    private void jMenufSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenufSaveActionPerformed
        if(cw.isSaved(jTextPane1.getText()))
        {
            //saved
        }
        else if(cw.currentFile != null)
        {
            try {
                cw.save(CurrentWorkspace.getNameWithoutExtension(cw.currentFile.getAbsolutePath()),jTextPane1.getText());
                System.out.println(CurrentWorkspace.getNameWithoutExtension(cw.currentFile.getAbsolutePath()));
            } catch (IOException ex) {
                Logger.getLogger(BlacksheepGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            try {cw.save(CurrentWorkspace.chooseFile(), jTextPane1.getText());
            } catch (IOException ex) {
                Logger.getLogger(BlacksheepGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jTabbedPane2.setTabComponentAt(0,new JLabel(cw.currentFile.getName()));
        jTabbedPane2.setToolTipText(cw.currentFile.getName());
    }//GEN-LAST:event_jMenufSaveActionPerformed

    private void jMenurBuildandRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenurBuildandRunActionPerformed
        try
        {
            refreshStyles();
            System.out.println(cw.build(jTextPane1.getText()));
            StyledDocument sdoc = jTextPane1.getStyledDocument();
            Style gg = jTextPane1.addStyle("gangnam", null);
            StyleConstants.setBackground(gg, new Color(235,85,109));
            cw.build(jTextPane1.getText());
            for(Object errorList : cw.errorList) {
                sdoc.setCharacterAttributes(CurrentWorkspace.getLineStart((int)errorList, jTextPane1.getText()), CurrentWorkspace.getLineEnd((int)errorList, jTextPane1.getText())-CurrentWorkspace.getLineStart((int)errorList, jTextPane1.getText()), gg, false);
            }
            jTabbedPane2.setTabComponentAt(0,new JLabel(cw.currentFile.getName()));
            jTabbedPane2.setToolTipText(cw.currentFile.getName());
            cw.run();
        }
        catch(java.lang.Exception ioe)
        {
            ioe.printStackTrace();
        }
    }//GEN-LAST:event_jMenurBuildandRunActionPerformed

    private void jMenufSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenufSaveAsActionPerformed
        try {
                cw.saveAs(CurrentWorkspace.chooseFile(), jTextPane1.getText());
                jTabbedPane2.setTabComponentAt(0,new JLabel(cw.currentFile.getName()));
                jTabbedPane2.setToolTipText(cw.currentFile.getName());
                
            } catch (IOException ex) {
                Logger.getLogger(BlacksheepGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    }//GEN-LAST:event_jMenufSaveAsActionPerformed

    private void jMenurBuildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenurBuildActionPerformed
        try
        {
            refreshStyles();            
            StyledDocument sdoc = jTextPane1.getStyledDocument();
            Style gg = jTextPane1.addStyle("gangnam", null);
            StyleConstants.setBackground(gg, new Color(235,85,109));
            cw.build(jTextPane1.getText());
            for(Object errorList : cw.errorList) {
                sdoc.setCharacterAttributes(CurrentWorkspace.getLineStart((int)errorList, jTextPane1.getText()), CurrentWorkspace.getLineEnd((int)errorList, jTextPane1.getText())-CurrentWorkspace.getLineStart((int)errorList, jTextPane1.getText()), gg, false);
            }
            jTabbedPane2.setTabComponentAt(0,new JLabel(cw.currentFile.getName()));
            jTabbedPane2.setToolTipText(cw.currentFile.getName());
        }
        catch(java.lang.Exception ioe)
        {
            ioe.printStackTrace();
        }
    }//GEN-LAST:event_jMenurBuildActionPerformed

    private void jMenufOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenufOpenActionPerformed
        try 
        {
            refreshStyles();
            if((cw.isSaved(jTextPane1.getText()) && cw.currentFile.exists()) || (cw.currentFile == null && jTextPane1.getText().length()==0))
            {
                jTextPane1.setText(cw.open());
            }
            else if(cw.currentFile!=null && !cw.isSaved(jTextPane1.getText()))
            {
                int n = CurrentWorkspace.saveConfirmation();
                if(n == 1)
                {
                    jTextPane1.setText(cw.open());
                }
                else if(n==0)
                {
                    cw.save(CurrentWorkspace.getNameWithoutExtension(cw.currentFile.getAbsolutePath()), jTextPane1.getText());
                    jTextPane1.setText(cw.open());
                }
            }
            else
            {
                int n = CurrentWorkspace.saveConfirmation();
                if(n == 1)
                {
                    jTextPane1.setText(cw.open());
                }
                else if(n == 0)
                {
                    cw.saveAs(CurrentWorkspace.chooseFile(),jTextPane1.getText());
                    jTextPane1.setText(cw.open());
                }
            }
            jTabbedPane2.setTabComponentAt(0,new JLabel(cw.currentFile.getName()));
            jTabbedPane2.setToolTipText(cw.currentFile.getName());
        }
        catch(IOException ioe)
        {
            System.err.println("File not found");
        }
        finally {
            highlightText();
        }
    }//GEN-LAST:event_jMenufOpenActionPerformed

    private void jMenufNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenufNewActionPerformed
         try 
        {
            refreshStyles();
            if((cw.isSaved(jTextPane1.getText()) && cw.currentFile.exists()) || (cw.currentFile == null && jTextPane1.getText().length()==0))
            {
                jTextPane1.setText(cw.reset());
            }
            else if(cw.currentFile!=null && !cw.isSaved(jTextPane1.getText()))
            {
                int n = CurrentWorkspace.saveConfirmation();
                if(n == 1)
                {
                    jTextPane1.setText(cw.reset());
                }
                else if(n==0)
                {
                    cw.save(CurrentWorkspace.getNameWithoutExtension(cw.currentFile.getAbsolutePath()), jTextPane1.getText());
                    jTextPane1.setText(cw.reset());
                }
            }
            else
            {
                int n = CurrentWorkspace.saveConfirmation();
                if(n == 1)
                {
                    jTextPane1.setText(cw.reset());
                }
                else if(n == 0)
                {
                    cw.saveAs(CurrentWorkspace.chooseFile(),jTextPane1.getText());
                    jTextPane1.setText(cw.reset());
                }
            }
            if(cw.currentFile!=null) {
                jTabbedPane2.setTabComponentAt(0,new JLabel(cw.currentFile.getName()));
                jTabbedPane2.setToolTipText(cw.currentFile.getName());
            }
            else
            {
                jTabbedPane2.setTabComponentAt(0,new JLabel("Untitled"));
                jTabbedPane2.setToolTipText("Untitled");
            }
        }
        catch(IOException ioe)
        {
            System.err.println("File not found");
        }
        finally {
            highlightText();
         }
    }//GEN-LAST:event_jMenufNewActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        refreshStyles();
        setExtendedState(JFrame.MAXIMIZED_BOTH); 
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.exitbois();
    }//GEN-LAST:event_formWindowClosing

    private void jMenutPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenutPreferencesActionPerformed
       
            new PrefUI(prop).setVisible(true);
            try
            {
                File xz = new File(System.getProperty("user.dir")+"\\BLACKSHEEP_PREF.xml");
                prop = new java.util.Properties();
                prop.loadFromXML(new FileInputStream(xz));
                System.out.println(prop.getProperty("fontsiz"));
                setProperties();
            }
            catch(Exception e){System.out.println(e.getMessage());}
        
    }//GEN-LAST:event_jMenutPreferencesActionPerformed

    private void jMenueClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenueClearAllActionPerformed
        jTextPane1.setText("");
        highlightText();
    }//GEN-LAST:event_jMenueClearAllActionPerformed

    private void jMenueClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenueClearActionPerformed
        jTextPane1.setText(jTextPane1.getText().substring(0, jTextPane1.getSelectionStart()) + jTextPane1.getText().substring(jTextPane1.getSelectionEnd(),jTextPane1.getText().length()-1));
        highlightText();
    }//GEN-LAST:event_jMenueClearActionPerformed

    private void jMenueUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenueUndoActionPerformed
        highlightText();
    }//GEN-LAST:event_jMenueUndoActionPerformed

    private void jTextPane1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane1KeyTyped
        highlightText();
    }//GEN-LAST:event_jTextPane1KeyTyped

    private void jTextPane1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextPane1PropertyChange
        highlightText();
    }//GEN-LAST:event_jTextPane1PropertyChange

    private void jMenuToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuToolsActionPerformed
        
    }//GEN-LAST:event_jMenuToolsActionPerformed
    String keywords[];
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        String x = "{(()()[][()}";
        List m = CurrentWorkspace.parenthesesCheck(x);
        for(Object h : m)
        {
            ParenthesisLocation pl = (ParenthesisLocation) h;
            System.out.println(pl.locale+" "+pl.bracket);
        }
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlacksheepGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlacksheepGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlacksheepGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlacksheepGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BlacksheepGUI().setVisible(true);
        });
    }
    private void colorizeText(int start,int end,Color color)
    {
        StyledDocument doc = jTextPane1.getStyledDocument();
        Style style = jTextPane1.addStyle("CodeSelection", null);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(start, end - start, style, true);
    }
    private void highlightText()
    {
        int h = jTextPane1.getCaretPosition();
        jTextPane1.setText(jTextPane1.getText().replaceAll("\\\n", "\n"));
        refreshStyles();
        String x = jTextPane1.getText();
        List m = CurrentWorkspace.parenthesesCheck(x);
        for(Object mendh : m)
        {
            ParenthesisLocation pl = (ParenthesisLocation) mendh;
            StyledDocument sd = jTextPane1.getStyledDocument();
            Style am = jTextPane1.addStyle("yolo",null);
            StyleConstants.setForeground(am, Color.red.darker());
            sd.setCharacterAttributes(pl.locale, 1, am, true);
        }
        jTextPane1.setCaretPosition(h);
//            check code for highlighting ezpz
        for(int i=0;i<jTextPane1.getText().length();i++)
        {
            char c = jTextPane1.getText().charAt(i);
            if(c!=' ' && c!='\n' && c!='(' && c!=')' && c!='{' && c!='}' && c!='[' && c!=']' && c!=';')
            {
                int off = i;
                String word = "";
                while(i<jTextPane1.getText().length()&&(jTextPane1.getText().charAt(i)!=' '&&jTextPane1.getText().charAt(i)!='\n'&&jTextPane1.getText().charAt(i)!='('&&jTextPane1.getText().charAt(i)!=')'&&jTextPane1.getText().charAt(i)!='{'&&jTextPane1.getText().charAt(i)!='}'&&jTextPane1.getText().charAt(i)!='['&&jTextPane1.getText().charAt(i)!=']'&&jTextPane1.getText().charAt(i)!=';'))
                {
                    word+=jTextPane1.getText().charAt(i);
                    i++;
                }
                int end = i;
                for(String hashboy:keywords)
                {
                    if(word.equals(hashboy))
                    {
                        if(jTextPane1.getText().substring(off, end).equals(word)){
                        this.colorizeText(off, end, Color.green.darker());
                        break;
                        }
                    }
                }
            }
        }
    }
    private void refreshStyles()
    {
        Style rs = jTextPane1.addStyle("ref",null);
        StyleConstants.setBackground(rs, Color.white);
        jTextPane1.getStyledDocument().setCharacterAttributes(0, jTextPane1.getText().length(), rs, true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenu jMenuRun;
    private javax.swing.JMenu jMenuTools;
    private javax.swing.JMenuItem jMenueClear;
    private javax.swing.JMenuItem jMenueClearAll;
    private javax.swing.JMenuItem jMenueRedo;
    private javax.swing.JMenuItem jMenueUndo;
    private javax.swing.JMenuItem jMenufExit;
    private javax.swing.JMenuItem jMenufNew;
    private javax.swing.JMenuItem jMenufOpen;
    private javax.swing.JMenuItem jMenufSave;
    private javax.swing.JMenuItem jMenufSaveAs;
    private javax.swing.JMenuItem jMenurBuild;
    private javax.swing.JMenuItem jMenurBuildandRun;
    private javax.swing.JMenuItem jMenutPreferences;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Blacksheep.png")));
    }
}
